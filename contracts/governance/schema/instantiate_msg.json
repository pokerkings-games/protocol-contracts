{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "contract_config",
    "poll_config",
    "staking_config",
    "ticket_config"
  ],
  "properties": {
    "contract_config": {
      "$ref": "#/definitions/ContractConfigInitMsg"
    },
    "poll_config": {
      "$ref": "#/definitions/PollConfigInitMsg"
    },
    "staking_config": {
      "$ref": "#/definitions/StakingConfigInitMsg"
    },
    "ticket_config": {
      "$ref": "#/definitions/TicketConfigInitMsg"
    }
  },
  "definitions": {
    "ContractConfigInitMsg": {
      "type": "object",
      "required": [
        "governance_token"
      ],
      "properties": {
        "governance_token": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "PollConfigInitMsg": {
      "type": "object",
      "required": [
        "execution_delay_period",
        "proposal_deposit",
        "quorum",
        "snapshot_period",
        "threshold",
        "voting_period"
      ],
      "properties": {
        "execution_delay_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_deposit": {
          "$ref": "#/definitions/Uint128"
        },
        "quorum": {
          "$ref": "#/definitions/Decimal"
        },
        "snapshot_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "threshold": {
          "$ref": "#/definitions/Decimal"
        },
        "voting_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "StakingConfigInitMsg": {
      "type": "object",
      "properties": {
        "distributor": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "TicketConfigInitMsg": {
      "type": "object",
      "required": [
        "distribution_schedule",
        "ticket_token"
      ],
      "properties": {
        "distribution_schedule": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 3,
            "minItems": 3
          }
        },
        "ticket_token": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
